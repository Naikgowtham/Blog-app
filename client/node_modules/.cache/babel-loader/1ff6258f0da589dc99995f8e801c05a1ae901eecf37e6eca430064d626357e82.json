{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config.js';\nconst API_URL = 'http://localhost:8000';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return processResponse(response);\n}, function (error) {\n  return Promise.reject(processError(error));\n});\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSucess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\nconst processError = error => {\n  if (error.response) {\n    console.log('ERROR IN RESPONSE:', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    console.log('ERROR IN REQUEST:', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    console.log('ERROR IN NETWORK:', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    usrl: value.url,\n    data: body,\n    responseType: value.responseType,\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentageCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentageCompleted);\n      }\n    }\n  });\n}\nexport { API };","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","processResponse","processError","status","isSucess","data","isFailure","msg","code","console","log","toJSON","isError","responseFailure","requestFailure","networkError","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","usrl","url","responseType","onUploadProgress","progressEvent","percentageCompleted","Math","round","loaded","total","onDownloadProgress"],"sources":["/home/gowtham/Gowtham/Web/Blog-app/client/src/service/api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES , SERVICE_URLS } from '../constants/config.js';\n\nconst API_URL = 'http://localhost:8000'\n\nconst axiosInstance = axios.create({\n    baseURL: API_URL,\n    timeout: 10000,\n    headers:{\n        \"Content-Type\" : \"application/json\"\n    }\n})\n\naxiosInstance.interceptors.request.use(\n    function (config){\n        return config;\n    },\n    function (error){\n        return Promise.reject(error);\n    }\n)\n\naxiosInstance.interceptors.response.use(\n    function(response){\n        return processResponse(response);\n    },\n    function (error){\n        return Promise.reject(processError(error));\n    }\n)\n\nconst processResponse = (response) => {\n    if(response?.status === 200){\n        return {isSucess: true , data: response.data}\n    } else {\n        return{\n            isFailure: true,\n            status: response?.status,\n            msg: response?.msg,\n            code: response?.code\n        }\n    }\n}\n\n\nconst processError = (error) => {\n    if(error.response){\n      console.log('ERROR IN RESPONSE:',error.toJSON());\n       return {\n          isError:true,\n          msg: API_NOTIFICATION_MESSAGES.responseFailure,\n          code: error.response.status\n      }   \n    } else if (error.request){\n        console.log('ERROR IN REQUEST:',error.toJSON());\n       return {\n          isError:true,\n          msg: API_NOTIFICATION_MESSAGES.requestFailure,\n          code: \"\"\n      } \n    } else {\n        console.log('ERROR IN NETWORK:',error.toJSON());\n       return {\n          isError:true,\n          msg: API_NOTIFICATION_MESSAGES.networkError,\n          code: \"\"\n      } \n    }\n}\n\nconst API ={};\n\n\n\nfor (const [key , value] of Object.entries(SERVICE_URLS)){\n    API[key] = (body, showUploadProgress , showDownloadProgress) =>\n       axiosInstance({\n        method: value.method,\n        usrl: value.url,\n        data: body,\n        responseType:value.responseType,\n        onUploadProgress: function(progressEvent) {\n            if(showUploadProgress){\n                let percentageCompleted = Math.round((progressEvent.loaded * 100)/progressEvent.total)\n                showUploadProgress(percentageCompleted);\n            }\n        }, \n        onDownloadProgress: function(progressEvent) {\n            if(showDownloadProgress){\n                let percentageCompleted = Math.round((progressEvent.loaded * 100)/progressEvent.total)\n                showDownloadProgress(percentageCompleted);\n            }\n        }\n       });\n    \n}\n\n\nexport {API};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,yBAAyB,EAAGC,YAAY,QAAQ,wBAAwB;AAEjF,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,aAAa,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC/BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAC;IACJ,cAAc,EAAG;EACrB;AACJ,CAAC,CAAC;AAEFJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAClC,UAAUC,MAAM,EAAC;EACb,OAAOA,MAAM;AACjB,CAAC,EACD,UAAUC,KAAK,EAAC;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAEDT,aAAa,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CACnC,UAASK,QAAQ,EAAC;EACd,OAAOC,eAAe,CAACD,QAAQ,CAAC;AACpC,CAAC,EACD,UAAUH,KAAK,EAAC;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACG,YAAY,CAACL,KAAK,CAAC,CAAC;AAC9C,CACJ,CAAC;AAED,MAAMI,eAAe,GAAID,QAAQ,IAAK;EAClC,IAAG,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,MAAK,GAAG,EAAC;IACxB,OAAO;MAACC,QAAQ,EAAE,IAAI;MAAGC,IAAI,EAAEL,QAAQ,CAACK;IAAI,CAAC;EACjD,CAAC,MAAM;IACH,OAAM;MACFC,SAAS,EAAE,IAAI;MACfH,MAAM,EAAEH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM;MACxBI,GAAG,EAAEP,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEO,GAAG;MAClBC,IAAI,EAAER,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEQ;IACpB,CAAC;EACL;AACJ,CAAC;AAGD,MAAMN,YAAY,GAAIL,KAAK,IAAK;EAC5B,IAAGA,KAAK,CAACG,QAAQ,EAAC;IAChBS,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACb,KAAK,CAACc,MAAM,CAAC,CAAC,CAAC;IAC/C,OAAO;MACJC,OAAO,EAAC,IAAI;MACZL,GAAG,EAAEtB,yBAAyB,CAAC4B,eAAe;MAC9CL,IAAI,EAAEX,KAAK,CAACG,QAAQ,CAACG;IACzB,CAAC;EACH,CAAC,MAAM,IAAIN,KAAK,CAACH,OAAO,EAAC;IACrBe,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACb,KAAK,CAACc,MAAM,CAAC,CAAC,CAAC;IAChD,OAAO;MACJC,OAAO,EAAC,IAAI;MACZL,GAAG,EAAEtB,yBAAyB,CAAC6B,cAAc;MAC7CN,IAAI,EAAE;IACV,CAAC;EACH,CAAC,MAAM;IACHC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACb,KAAK,CAACc,MAAM,CAAC,CAAC,CAAC;IAChD,OAAO;MACJC,OAAO,EAAC,IAAI;MACZL,GAAG,EAAEtB,yBAAyB,CAAC8B,YAAY;MAC3CP,IAAI,EAAE;IACV,CAAC;EACH;AACJ,CAAC;AAED,MAAMQ,GAAG,GAAE,CAAC,CAAC;AAIb,KAAK,MAAM,CAACC,GAAG,EAAGC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAClC,YAAY,CAAC,EAAC;EACrD8B,GAAG,CAACC,GAAG,CAAC,GAAG,CAACI,IAAI,EAAEC,kBAAkB,EAAGC,oBAAoB,KACxDnC,aAAa,CAAC;IACboC,MAAM,EAAEN,KAAK,CAACM,MAAM;IACpBC,IAAI,EAAEP,KAAK,CAACQ,GAAG;IACfrB,IAAI,EAAEgB,IAAI;IACVM,YAAY,EAACT,KAAK,CAACS,YAAY;IAC/BC,gBAAgB,EAAE,SAAAA,CAASC,aAAa,EAAE;MACtC,IAAGP,kBAAkB,EAAC;QAClB,IAAIQ,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAEJ,aAAa,CAACK,KAAK,CAAC;QACtFZ,kBAAkB,CAACQ,mBAAmB,CAAC;MAC3C;IACJ,CAAC;IACDK,kBAAkB,EAAE,SAAAA,CAASN,aAAa,EAAE;MACxC,IAAGN,oBAAoB,EAAC;QACpB,IAAIO,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAEJ,aAAa,CAACK,KAAK,CAAC;QACtFX,oBAAoB,CAACO,mBAAmB,CAAC;MAC7C;IACJ;EACD,CAAC,CAAC;AAET;AAGA,SAAQd,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}